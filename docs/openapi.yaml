openapi: 3.0.0
servers:
  - url: 'http://crypto-portfolio.test/api/v1'
info:
  description: >-
    TO DO
  version: 0.1.0
  title: Crypto Portfolio API
tags:
  - name: user
    description: Operations on user account
paths:
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: ''
      operationId: create
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "18e7e145-b0dc-447a-b34c-2608181b6cec"
        '422':
          description: Unprocessable Entity (Validation Error)
          content:
            application/json:
              schema:
                type: object
                properties:
                  phoneNumber:
                    type: array
                    items:
                      type: string
                      example: "The phone number accepts only valid phone numbers with either 00XX or +XX prefix."
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
        required: true
  '/user/{id}':
    get:
      tags:
        - user
      summary: Get user by user ID
      description: ''
      operationId: get
      parameters:
        - name: id
          in: path
          description: The ID of a user that needs to be fetched.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: array
                    items:
                      type: string
                      example: "The user with ID: cc708df5-6e5d-4551-80ea-59b72169d7a8 does not exist."
    put:
      tags:
        - user
      summary: Update user
      description: ''
      operationId: update
      parameters:
        - name: id
          in: path
          description: The ID of a user that needs to be updated.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '422':
          description: Unprocessable Entity (Validation Error)
          content:
            application/json:
              schema:
                type: object
                properties:
                  phoneNumber:
                    type: array
                    items:
                      type: string
                      example: "The phone number accepts only valid phone numbers with either 00XX or +XX prefix."
        '404':
          description: User Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: array
                    items:
                      type: string
                      example: "The user with ID: cc708df5-6e5d-4551-80ea-59b72169d7a8 does not exist."
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user object
        required: true
    delete:
      tags:
        - user
      summary: Delete user
      description: ''
      operationId: delete
      parameters:
        - name: id
          in: path
          description: The ID of a user that needs to be deleted.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content
        '404':
          description: User Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: array
                    items:
                      type: string
                      example: "The user with ID: cc708df5-6e5d-4551-80ea-59b72169d7a8 does not exist."
components:
  schemas:
    User:
      title: User
      description: User model details
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
        phoneNumber:
          type: string
